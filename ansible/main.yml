# Setting host
- hosts: localhost
  gather_facts: false

# Variables
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python}}'
    image_name: hello-go
    image_tag: latest
    replicas: 4
    minikube_install_dir: '/usr/local/bin'
    minikube_install_path: '{{ minikube_install_dir }}/minikube'
    minikube_mirror: 'https://github.com/kubernetes/minikube/releases/download/v{{ minikube_version }}'
    minikube_os: 'linux'
    minikube_architecture: 'amd64'
    minikube_redis_filename: 'minikube-{{ minikube_os }}-{{ minikube_architecture }}'
    minikube_download_filename: '{{ minikube_redis_filename }}-{{ minikube_version }}'
    minikube_download_dir: '/tmp/minikube'
    minikube_version: '1.12.1'

# Pre-tasks to validate if Minikube is intall and running
  pre_tasks:
    - name: create download directory
      file:
        state: directory
        mode: 'u=rwx,go=rx'
        dest: '{{ minikube_download_dir }}'

    - name: download sha256sum
      get_url:
        url: '{{ minikube_mirror }}/{{ minikube_redis_filename }}.sha256'
        dest: '{{ minikube_download_dir }}/{{ minikube_download_filename }}.sha256'
        force: no
        use_proxy: yes
        validate_certs: yes
        mode: 'u=rw,go=r'

    - name: read sha256sum
      slurp:
        src: '{{ minikube_download_dir }}/{{ minikube_download_filename }}.sha256'
      register: minikube_sha256sum

    - name: download Minikube
      get_url:
        url: '{{ minikube_mirror }}/{{ minikube_redis_filename }}'
        dest: '{{ minikube_download_dir }}/{{ minikube_download_filename }}'
        sha256sum: '{{ minikube_sha256sum.content | b64decode | trim }}'
        force: no
        use_proxy: yes
        validate_certs: yes
        mode: 'u=rw,go=r'

    - name: create the Minikube installation dir
      become: yes
      file:
        state: directory
        owner: root
        group: root
        mode: 'u=rwx,go=rx'
        dest: '{{ minikube_install_dir }}'

    - name: install Minikube
      become: yes
      copy:
        src: '{{ minikube_download_dir }}/{{ minikube_download_filename }}'
        remote_src: yes
        dest: '{{ minikube_install_path }}'
        force: yes
        owner: root
        group: root
        mode: 'u=rwx,go=rx'

    - name: Check Minikube's status.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true
    # Otherwise will start minikube
    - name: Start Minikube if it's not running.
      command: minikube start
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

# Check existing images
  tasks:
    - name: Get existing image hash.
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false

    # Otherwise will create an image from Dockerfile location
    - name: Build image if it's not already built.
      shell: |
        eval $(minikube docker-env)
        docker build -t {{ image_name }} ../
      when: not image_hash.stdout

    # Create Kubernetes resources to run Hello Go.
    - name: Create a Deployment for Hello Go.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: hello-go
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: hello-go
            template:
              metadata:
                labels:
                  app: hello-go
              spec:
                containers:
                  - name: hello-go
                    image: "{{ image_name }}:{{ image_tag }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: 8180

    # Create Kubernetes Service (DNS required)
    - name: Create a Service for Hello Go.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-go
            namespace: default
          spec:
            type: LoadBalancer
            ports:
              - port: 8180
                targetPort: 8180
            selector:
              app: hello-go

  post_tasks:
    #Example export using minikube services
    - name: Expose Hello Go on the host via Minikube.
      command: minikube service hello-go --url=true
      changed_when: false
      register: minikube_service
    - debug:
        msg: "Hello Go URL: {{ minikube_service['stdout_lines'][0] }}"

    - name: Verify Hello Go is responding.
      uri:
        url: "{{ minikube_service['stdout_lines'][0] }}/test"
        return_content: true
      register: hello_go_response
      failed_when: "'/test' not in hello_go_response.content"

    - debug:
        msg: "Testing URL Hello GO Requested: {{hello_go_response.content}} Status: {{hello_go_response.status}}"

